/*
 * Copyright (c) 2008-2016, Integrity Project Ltd. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * Neither the name of the Integrity Project nor the names of its contributors
 * may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE
 */

#ifndef __TBA_STL_QUEUE_FIFO_H
#define __TBA_STL_QUEUE_FIFO_H

#include "xStl/types.h"
#include "xStl/data/array.h"

/*
 * cQueueFifo.h
 *
 * The interface for the fifo-queue. The queue is a memory block with const
 * size which has two pointers: read pointer and write pointer. The program
 * can write down to the queue and in the other hand read from the queue.
 * The writing and the reading are circulate throw the allocated buffer.
 *
 * This class is not thread-safe class. (IT WAS...)
 *
 * TODO
 * ----
 *  - Make this class template class for future usage ;)
 *
 * Author: Elad Raz <e@eladraz.com>
 */

class cQueueFifo
{
public:
    /*
     * Constructor.
     * Create an empty queue with 'size' bytes capabilites.
     */
    cQueueFifo(uint size);

    /*
     * Copy constructor and operator = will be generated by the compiler by
     * copying all class members.
     */

    /*
     * Return how many bytes frees there are in the queue.
     */
    uint getQueueFreespace();

    /*
     * Return how many data bytes avliabe at the queue.
     */
    uint getQueueOccupyspace();

    /*
     * Read from the queue. The number of bytes actully read return
     * from the function. If the queue is empty, the function return
     * 0 as the number of bytes read. (There isn't an error...)
     *
     * buffer - The data will be stored at.
     * count  - How many bytes to read.
     *
     * Return the number of bytes read.
     */
    uint read(uint8 *buffer, uint count);

    /*
     * Write bytes to the queue. The number of bytes written returned
     * from the function. The function return different number than
     * 'count' only when the queue is full.
     *
     * buffer - The bytes to be written to the queue.
     * count - The number of bytes written
     *
     * Return the number of bytes written.
     */
    uint write(const uint8* buffer, uint count);

// TODO DBG CODE - removed private for debugging
//private:
    /*
     * Internal unlock functions.
     * This function used to prevent dead-locks...
     */
    uint getFreespace();
    uint getOccupyspace();

    /*
     * The queue is implement as array of bytes.
     * And two queue pointers.
     */
    cBuffer        m_queue;
    volatile uint  m_readPointer;
    volatile uint  m_writePointer;

    // Stores whether the read and the write pointer are toghther because the
    // queue is full or completly empty.
    volatile bool m_isFull;

    // Is equal to m_queue.getSize();
    uint m_queueSize;
};


#endif // __TBA_STL_QUEUE_FIFO_H

