/*
 * Copyright (c) 2008-2016, Integrity Project Ltd. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * Neither the name of the Integrity Project nor the names of its contributors
 * may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE
 */

#ifndef __TBA_STL_SETARRAY_H
#define __TBA_STL_SETARRAY_H

/*
 * setArray.h
 *
 * A single array of bits which define whether an attribute is set or not.
 * A replacement data struct for the FD_ISSET methods.
 *
 * Author: Elad Raz <e@eladraz.com>
 */
#include "xStl/types.h"
#include "xStl/data/array.h"

/*
 * A single array of bits which define whether an attribute is set or not.
 * A simple interface based on cSArray (instead the more complex and powerful
 * cBitStream)
 *
 * NOTE: This data struct is optimized for 32 bit processors
 *
 * NOTE: This class is not thread safe
 */
class cSetArray {
public:
    /*
     * Constructor. Initialized the array.
     *
     * initializedSize - The number of values in the array.
     */
    cSetArray(uint initializedSize = 0,
              bool shouldResetArray = true,
              bool resetAsSet = false);

    // Copy-constructor and operator = will auto generated by the compiler

    /*
     * Return the number of values
     */
    uint getLength() const;

    /*
     * Changes the size of the values.
     *
     * newSize     - The number of values in the array.
     * saveContent - Set to true if  the previous content should be copied into
     *               the new array
     */
    void changeSize(uint newSize,
                    bool saveContent = true);

    /*
     * Clear all values in the set
     */
    void resetArray();

    /*
     * Return true if the value in 'location' is set.
     *
     * location - The position of the bit to be tested
     *
     * Throw exception if the location is out of range.
     */
    bool isSet(uint location) const;

    /*
     * Clears/set the value in 'location'
     *
     * location - The position of the bit to be tested
     *
     * Throw exception if the location is out of range.
     */
    void set(uint location);
    void clear(uint location);

    /*
     * Returns the lowest location which is set
     * If no bit is set, returns getLength()
     */
    uint first() const;

    /*
     * Return true if there is only a single place that is
     * set in the setArray.
     */
    bool isSetInOnePlace();

    /*
     * Override the AND= operator
     */
    cSetArray* operator&=(const cSetArray& other);

    /*
     * Override the OR= operator
     */
    cSetArray* operator|=(const cSetArray& other);

private:
    // The number of values which can be stored, must be multiple of 2
    enum { BITS_COUNT_PER_ELEMENT = 32 };
    // The shift value
    enum { BITS_COUNT_PER_ELEMENT_SHIFT = 5 };
    // The number of bytes per element
    enum { BYTES_PER_ELEMENT_SHIFT = 2};

    /*
     * Calculates the positon of a value inside the array
     *
     * location   - The position of the value
     * arrayIndex - The element index of which the value is stored
     * bitIndex   - The bits position inside the array
     */
    static void calculatePosition(uint location,
                                  uint& arrayIndex,
                                  uint& bitIndex);

    // The content itself
    cSArray<uint32> m_data;
    // The number of values
    uint m_length;
};

#endif // __TBA_STL_SETARRAY_H
