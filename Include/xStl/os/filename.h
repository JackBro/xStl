/*
 * Copyright (c) 2008-2016, Integrity Project Ltd. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * Neither the name of the Integrity Project nor the names of its contributors
 * may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE
 */

#ifndef __TBA_STL_OS_FILENAME_H
#define __TBA_STL_OS_FILENAME_H

/*
 * filename.h
 *
 * The filename class is responsible to analize and perform actions
 * over filenames.
 *
 * There are many name format of files, here are the list of all supported
 * xStl name convenstions:
 *   - DOS names    (A:\FILENAME.EXT)
 *   - Win32 names  (C:\Program files\Internet explorer\iexplore.exe)
 *   - Unix names   (/root/bin/parser)
 *   - http names   (http://localhost/index.html)
 *   - UNC names    (\\server\c\users\tba\projects\databse.ocx)
 *
 * Author: Elad Raz <e@eladraz.com>
 */
#include "xStl/types.h"
#include "xStl/data/char.h"
#include "xStl/data/string.h"
#include "xStl/os/directoryFormatParser.h"

/*
 * Cross platform module which seperate the file into the following two parts:
 *    <fullpath><filename>
 *
 * These parts are also divided into the following groups:
 *  - Fullpath:   Database name,  which is the drive name, database name, internet site
 *                                name which the file is located in:
 */
class cFilename {
public:
    /*
     * Appendix constructor. Append a directory to a base directory
     *
     * basePath             - The path which the 'relativeFilenamePath' is
     *                        based on.
     * relativeFilenamePath - The relative name.
     *                        Can be one of the either options:
     *                        - Full path name (such as "C:\windows\notepad.exe")
     *                          in this case the basePath is ignored if and only
     *                          if the 'shouldStepBackward' is true or it's path
     *                          equals the filename path
     *                        - Relative path (such as "a.txt" or "..\a.txt") the
     *                          cFilename class will parse the path directory
     *                          according to the 'basePath'
     *                        NOTE: Different database names will now be excluded
     *                              Giving a string ("D:temp.tmp") will throw
     *                              exception.
     *
     * shouldStepBackward   - Security flag. If it's value equals true, the
     *                        full file path (base+relative) should be able to
     *                        access files at the parent directory. Otherwise,
     *                        if this value if false, the file must be start
     *                        with the 'basePath'.
     * enforceDirectory     - Set to true in order to enforce directory
     *
     * Throw exception if the directory format is invalid
     */
    cFilename(const cFilename& basePath,
              const cString& relativeFilenamePath,
              bool shouldStepBackward = true,
              bool enforceDirectory = false);

    // Copy constructor and operator = will auto-generated by the compiler.

    // Operator == and operator != will auto-generated by the compiler.

    /*
     * Return the complete path of the file include it's base directory,
     * file name and file extension.
     *
     * NOTE: The if the filename is empty, the return string is a directory.
     *       The directory must be ended with directory marker (such as '\'
     *       or '/')
     */
    const cString& getFullPath() const;

    /*
     * Return the database name of the file.
     *
     * - For windows/DOS based filename the return value is a drive name (C:, A:)
     * - For internet site, the return value will be the name of the service,
     *   such as "http:", "ftp:", "https:".
     * - UNC name will have the following syntax: \\servername\devicename\
     */
    cString getDatabaseName() const;

    /*
     * Return the directory of the file. The directory contains the base position
     * of the file, including it's database name.
     */
    cFilename getDirectoryName() const;

    /*
     * Returns only the portion of the filename
     * Returns empty string if the filename is not included.
     */
    cString getFilename() const;

    /*
     * Return the temporary directory of the current operating system.
     *
     * This directory has a read/write attributes and it's used to store
     * temporary application data.
     *
     * For windows, this is the cFilename wrappers of the GetTempDir() win32 API
     */
    static const cFilename& getTempDirectory();

    /*
     * Return the current directory of the computer in this time state.
     */
    static cFilename getCurrentDirectory();

    /*
     * Tests whether a character is directory separator.
     *
     * ch - The separator to be examine.
     *
     * Return true if ch is a separator
     */
    static bool isDirectorySeperator(const character ch);

    /*
     * Return a string which start from 'startPosition' and last until the
     * next directory separator or the end of the string
     *
     * filename      - The filename to extract the information from
     * startPosition - The start position for the string search
     */
    static cString readDirectory(const cString& filename,
                                 uint startPosition);

    /*
     * Return true if the 'directoryName' mark a previous directory operation
     */
    static bool isPreviousDirectoryMarker(const cString& directoryName);

    /*
     * Return true if the 'directoryName' mark the current directory operation
     */
    static bool isCurrentDirectoryMarker(const cString& directoryName);

    /*
     * Check the relative directory name. Check any illegal characters of
     * the directory. The function prevents any future buffer-overflow
     * related to file names.
     *
     * relativeName - The name of be check
     *
     * Return true if the name is valid file/directory name, false otherwise.
     */
    static bool checkRelativeNameValidation(const cString& relativeName);

    /// The directory separator used by Microsoft operating system ('\')
    static const character m_directorySeperatorWindows;
    /// The directory separator used by Unix based operating system ('/')
    static const character m_directorySeperatorUnix;
private:
    /*
     * Make a filename class using full-path name. The format of the filename
     * is changing along with the different operating system.
     *
     * fullpath - The complete file path including it's database
     * parser   - The object to be used inorder to parse the content of the
     *            filename
     */
    cFilename(const cString& fullpath,
              const cDirectoryFormatParser::FilenameParserPtr& parser);

    /*
     * Make sure that the filename ends with directory separator
     */
    void enforceDirectory();

    /*
     * The complete path of the filename, not including the filename itself and
     * it's file extension.
     * For example:    C:\WINNT\System32\drivers\ndis.sys
     */
    cString m_filename;

    /*
     * The object to be used inorder to parse the content of the filename
     */
    cDirectoryFormatParser::FilenameParserPtr m_directoryParser;

    /// A directory which point out to the current directory
    static const character m_directoryCurrentDirectory[];
    /// A directory which point out to the previous directory
    static const character m_directoryPreviousDirectory[];
    /// List of all operating system directory object handlers.
    enum { OS_DIRECTORY_FORMAT_PARSER_COUNT = 1};
    static cDirectoryFormatParserPtr
        m_directoryParserHandlers[OS_DIRECTORY_FORMAT_PARSER_COUNT];
};

#endif // __TBA_STL_OS_FILENAME_H
