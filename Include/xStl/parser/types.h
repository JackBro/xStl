/*
 * Copyright (c) 2008-2016, Integrity Project Ltd. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * Neither the name of the Integrity Project nor the names of its contributors
 * may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE
 */

#ifndef __TBA_XSTL_PARSER_TYPES_H
#define __TBA_XSTL_PARSER_TYPES_H

/**
 * types.h
 *
 * Contains the different types which can be handled by any compiler.
 * The different types can be such as: int8, uint8, char, string etc.
 *
 * Author: Elad Raz <e@eladraz.com>
 */
#include "xStl/types.h"
#include "xStl/data/string.h"
#include "xStl/data/char.h"

/*
 * The types module contains enum of all supported types, thier string
 * representation and functions which translates between them.
 */
class Types
{
public:
    /*
     * The different types.
     */
    enum Type {
        TYPE_UINT8   = 0,     //  8 bit unsigned number
        TYPE_UINT16  = 1,     // 16 bit unsigned number
        TYPE_UINT32  = 2,     // 32 bit unsigned number
        TYPE_INT8    = 3,     //  8 bit signed number
        TYPE_INT16   = 4,     // 16 bit signed number
        TYPE_INT32   = 5,     // 32 bit signed number
        TYPE_STRING  = 6,     // C string which start with " and ends with "
        TYPE_VOID    = 7,     // A void, used for return code.

        // The number of types generated by the compiler.
        TYPES_COUNT
    };

    // Marker for dynamic variable size
    static const uint TYPE_SIZE_VARIABLE;

    // The description and declaration strings for each type.
    static const lpString m_typeStrings[TYPES_COUNT];

    // The count of bytes each variable needed.
    // Value of TYPE_SIZE_VARIABLE means that the length is dynamic.
    static const uint m_typeSize[TYPES_COUNT];


    /*
     * The functions translate between sensative string to its' corresponding
     * enum number of "Types"
     *
     * typeName - The name of the type
     *
     * The function throws exception if the non of the types are match.
     */
    static Type getType(const cString& typeName);

    /*
     * Return true if 'type' is one of the uint types, false otherwise.
     *
     * type - The type to be tested.
     */
    static bool isUnsignedIntegerType(Type type);

    /*
     * Return true if 'type' is one of the signed int types, false otherwise.
     *
     * type - The type to be tested.
     */
    static bool isSignedIntegerType(Type type);

    /*
     * Return true if 'type' is signed/unsigned integer type.
     *
     * type - The type to be tested.
     */
    static bool isIntegerType(Type type);

    /*
     * Return true if 'type' is one of the strings types, false otherwise.
     *
     * type - The type to be tested.
     */
    static bool isStringType(Type type);
};

#endif // __TBA_XSTL_PARSER_TYPES_H
